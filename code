#include <SM.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>



#define trigPin 8
#define echoPin 12
#define button 7

//-------------------------------------------------------------------------------Pulse sensor-----------------------------------------------------------------------------------

//  Variables
#define pulsePin  1                // Pulse Sensor purple wire connected to analog pin 0
#define blinkPin  13                // pin to blink led at each beat
#define fadePin  5                  // pin to do fancy classy fading blink at each beat
int fadeRate = 0;                // used to fade LED on with PWM on fadePin

// Volatile Variables, used in the interrupt service routine!
volatile int BPM;                   // int that holds raw Analog in 0. updated every 2mS
volatile int Signal;                // holds the incoming raw data
volatile int IBI = 600;             // int that holds the time interval between beats! Must be seeded! 
volatile boolean Pulse = false;     // "True" when User's live heartbeat is detected. "False" when not a "live beat". 
volatile boolean QS = false;        // becomes true when Arduoino finds a beat.

// Regards Serial OutPut  -- Set This Up to your needs
static boolean serialVisual = true;   // Set to 'false' by Default.  Re-set to 'true' to see Arduino Serial Monitor ASCII Visual Pulse 

//-------------------------------------------------------------------------------Pulse sensor-----------------------------------------------------------------------------------



SM Mix(TempRead);


#define outputPin 0
int buttonState =0;


LiquidCrystal_I2C lcd(0x27,16,2); 




void setup() {

  
 //initialize the LCD
 lcd.init();


 //initilizing  button
 pinMode(button,INPUT);


  
 // Print a message to the LCD.
  lcd.backlight();
  lcd.setCursor(0,0);
  Serial.begin(9600);
 
   //initilizing ultra POWER SENSOR!!!
  pinMode (trigPin,OUTPUT);
  pinMode (echoPin,INPUT);




  //initlizing pulse sensor
  pinMode(blinkPin,OUTPUT);         // pin that will blink to your heartbeat!
  pinMode(fadePin,OUTPUT);          // pin that will fade to your heartbeat!
  interruptSetup();
 
}



void loop() {

  EXEC(Mix);
}


State S1(){

  lcd.clear();
  
  //Serial
  Serial.println("Welcome! Lets Begin!");


  //Dispay LCD
  lcd.print("Starting....");
  delay(3000);

 Mix.Set(TempReady); 
}

  //Temp ready-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
State TempReady(){
  
  //Temp ready
  lcd.clear();
  lcd.print("Temp Sensor");
  lcd.println("Ready");

  Serial.print("temp ready..waiting for button");


  buttonState = digitalRead(button);
  if(buttonState == HIGH){
    Mix.Set(TempRead);
    }
}

  //Temp Read------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

State TempRead(){

  //Reading Temp Value
  lcd.clear();
  int rawVoltage = analogRead(outputPin);
  float millivolts = (rawVoltage/1024.0)*5000;
  float celsius = millivolts/10;

   Serial.print("Temp = ");
   Serial.print(celsius);
   Serial.println(" Celsius");

  
  lcd.print("Temperature: ");
  lcd.print(celsius);
  lcd.print(" celsius");
  delay(1000);
  


 buttonState = digitalRead(button);
 if(buttonState == HIGH){
    lcd.clear();
    lcd.print("Temp = ");
    lcd.print(celsius);
    lcd.print(" Celsius");



    /*delay(5000);

    lcd.clear();
    lcd.print("Activating 2nd ");
    lcd.println("Sensor");


    delay(3000);
 */
    Mix.Set(HeightRead);}
  
  }

 //Height ready----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
State HeightReady(){
  
 
  lcd.clear();
  lcd.print("Height Sensor");
  lcd.println("Ready");


  buttonState = digitalRead(button);
  if(buttonState == HIGH){
    Mix.Set(HeightRead);
    }
}
 

  //Height Read------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

State HeightRead(){
  
    lcd.clear();
  long duration , distance;
  digitalWrite (trigPin,LOW);
  delay  (2);
  digitalWrite (trigPin,HIGH);
  delay (10);
  digitalWrite (trigPin,LOW);
  duration = pulseIn (echoPin,HIGH);
  distance = (duration / 2)/29.1;
  if (distance >= 400 || distance <= 1)
  {
    Serial.println ("Out Of Range");
    lcd.print("Out Of Range");
  }
  else {
    Serial.print(distance);
    Serial.println ("    cm");

    lcd.print(distance);
    lcd.print(" cm");
  }
  delay (2000);


 buttonState = digitalRead(button);
 if(buttonState == HIGH){
    lcd.clear();
    lcd.print("Height = ");
    lcd.print(distance);
    lcd.print(" cm");

    /*delay(5000);

    lcd.clear();
    lcd.print("Activating 3rd ");
    lcd.println("Sensor");


    delay(3000);
 */
    Mix.Set(PulseRead);
 }
 
  }


 //Pulse ready-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
State PulseReady(){
  
 
  lcd.clear();
  lcd.print("Pulse Sensor Ready");

delay(1000);

  buttonState = digitalRead(button);
  if(buttonState == HIGH){
    Mix.Set(PulseRead);
    }
}


 //-----------------------------------Pulse Readingg------------------------------------------------------------------------------------------------
State PulseRead(){
  
  //------------------------Reading------------------------------------------
  //lcd.clear();
    serialOutput() ;       
    
  if (QS == true){     // A Heartbeat Was Found
                       // BPM and IBI have been Determined
                       // Quantified Self "QS" true when arduino finds a heartbeat
        digitalWrite(blinkPin,HIGH);     // Blink LED, we got a beat. 
        fadeRate = 255;         // Makes the LED Fade Effect Happen
                                // Set 'fadeRate' Variable to 255 to fade LED with pulse
        serialOutputWhenBeatHappens();   // A Beat Happened, Output that to serial.
   
        QS = false;                      // reset the Quantified Self flag for next time    
  }
     
  ledFadeToBeat();                      // Makes the LED Fade Effect Happen
  delay(20);                             //  take a break

  //--------------------------------Reading--------------------------------------------
  
 buttonState = digitalRead(button);
 //if(buttonState == LOW){
 //   lcd.clear();
 //   lcd.print("Reset Program");

//delay(3000);
 
   // Mix.Set(S1);
 //}

  
  }


//------------------------------------------------other functions other functions other functions other functions other functions other functions -----------------------------------





  //////////
/////////  All Serial Handling Code, 
/////////  It's Changeable with the 'serialVisual' variable
/////////  Set it to 'true' or 'false' when it's declared at start of code.  
/////////

void serialOutput(){   // Decide How To Output Serial. 
 if (serialVisual == true){  
     arduinoSerialMonitorVisual('-', Signal);   // goes to function that makes Serial Monitor Visualizer
 } else{
      sendDataToSerial('S', Signal);     // goes to sendDataToSerial function
 }        
}


//  Decides How To OutPut BPM and IBI Data
void serialOutputWhenBeatHappens(){ 

    
 if (serialVisual == true){            //  Code to Make the Serial Monitor Visualizer Work
    Serial.print("*** Heart-Beat Happened *** ");  //ASCII Art Madness
    Serial.print("BPM: ");
    Serial.print(BPM);
    Serial.print("  ");

    lcd.clear();
    lcd.print("BPM: ");
    lcd.print(BPM);
   
    
    
 } else{
        sendDataToSerial('B',BPM);   // send heart rate with a 'B' prefix
        sendDataToSerial('Q',IBI);   // send time between beats with a 'Q' prefix
 }   
}



//  Sends Data to Pulse Sensor Processing App, Native Mac App, or Third-party Serial Readers. 
void sendDataToSerial(char symbol, int data ){
    Serial.print(symbol);

    Serial.println(data);                
  }


//  Code to Make the Serial Monitor Visualizer Work
void arduinoSerialMonitorVisual(char symbol, int data ){    
  const int sensorMin = 0;      // sensor minimum, discovered through experiment
const int sensorMax = 1024;    // sensor maximum, discovered through experiment

  int sensorReading = data;
  // map the sensor range to a range of 12 options:
  int range = map(sensorReading, sensorMin, sensorMax, 0, 11);

  // do something different depending on the 
  // range value:
  switch (range) {
  case 0:     
    Serial.println("");     /////ASCII Art Madness
    break;
  case 1:   
    Serial.println("---");
    break;
  case 2:    
    Serial.println("------");
    break;
  case 3:    
    Serial.println("---------");
    break;
  case 4:   
    Serial.println("------------");
    break;
  case 5:   
    Serial.println("--------------|-");
    break;
  case 6:   
    Serial.println("--------------|---");
    break;
  case 7:   
    Serial.println("--------------|-------");
    break;
  case 8:  
    Serial.println("--------------|----------");
    break;
  case 9:    
    Serial.println("--------------|----------------");
    break;
  case 10:   
    Serial.println("--------------|-------------------");
    break;
  case 11:   
    Serial.println("--------------|-----------------------");
    break;
  
  } 
}
//------------------------------------------------------------------------------------------------------------------------------------------









volatile int rate[10];                    // array to hold last ten IBI values
volatile unsigned long sampleCounter = 0;          // used to determine pulse timing
volatile unsigned long lastBeatTime = 0;           // used to find IBI
volatile int P =512;                      // used to find peak in pulse wave, seeded
volatile int T = 512;                     // used to find trough in pulse wave, seeded
volatile int thresh = 525;                // used to find instant moment of heart beat, seeded
volatile int amp = 100;                   // used to hold amplitude of pulse waveform, seeded
volatile boolean firstBeat = true;        // used to seed rate array so we startup with reasonable BPM
volatile boolean secondBeat = false;      // used to seed rate array so we startup with reasonable BPM


void interruptSetup(){     
  // Initializes Timer2 to throw an interrupt every 2mS.
  TCCR2A = 0x02;     // DISABLE PWM ON DIGITAL PINS 3 AND 11, AND GO INTO CTC MODE
  TCCR2B = 0x06;     // DON'T FORCE COMPARE, 256 PRESCALER 
  OCR2A = 0X7C;      // SET THE TOP OF THE COUNT TO 124 FOR 500Hz SAMPLE RATE
  TIMSK2 = 0x02;     // ENABLE INTERRUPT ON MATCH BETWEEN TIMER2 AND OCR2A
  sei();             // MAKE SURE GLOBAL INTERRUPTS ARE ENABLED      
} 


// THIS IS THE TIMER 2 INTERRUPT SERVICE ROUTINE. 
// Timer 2 makes sure that we take a reading every 2 miliseconds
ISR(TIMER2_COMPA_vect){                         // triggered when Timer2 counts to 124
  cli();                                      // disable interrupts while we do this
  Signal = analogRead(pulsePin);              // read the Pulse Sensor 
  sampleCounter += 2;                         // keep track of the time in mS with this variable
  int N = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise

    //  find the peak and trough of the pulse wave
  if(Signal < thresh && N > (IBI/5)*3){       // avoid dichrotic noise by waiting 3/5 of last IBI
    if (Signal < T){                        // T is the trough
      T = Signal;                         // keep track of lowest point in pulse wave 
    }
  }

  if(Signal > thresh && Signal > P){          // thresh condition helps avoid noise
    P = Signal;                             // P is the peak
  }                                        // keep track of highest point in pulse wave

  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
  // signal surges up in value every time there is a pulse
  if (N > 250){                                   // avoid high frequency noise
    if ( (Signal > thresh) && (Pulse == false) && (N > (IBI/5)*3) ){        
      Pulse = true;                               // set the Pulse flag when we think there is a pulse
      digitalWrite(blinkPin,HIGH);                // turn on pin 13 LED
      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
      lastBeatTime = sampleCounter;               // keep track of time for next pulse

      if(secondBeat){                        // if this is the second beat, if secondBeat == TRUE
        secondBeat = false;                  // clear secondBeat flag
        for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
          rate[i] = IBI;                      
        }
      }

      if(firstBeat){                         // if it's the first time we found a beat, if firstBeat == TRUE
        firstBeat = false;                   // clear firstBeat flag
        secondBeat = true;                   // set the second beat flag
        sei();                               // enable interrupts again
        return;                              // IBI value is unreliable so discard it
      }   


      // keep a running total of the last 10 IBI values
      word runningTotal = 0;                  // clear the runningTotal variable    

      for(int i=0; i<=8; i++){                // shift data in the rate array
        rate[i] = rate[i+1];                  // and drop the oldest IBI value 
        runningTotal += rate[i];              // add up the 9 oldest IBI values
      }

      rate[9] = IBI;                          // add the latest IBI to the rate array
      runningTotal += rate[9];                // add the latest IBI to runningTotal
      runningTotal /= 10;                     // average the last 10 IBI values 
      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
      QS = true;                              // set Quantified Self flag 
      // QS FLAG IS NOT CLEARED INSIDE THIS ISR
    }                       
  }

  if (Signal < thresh && Pulse == true){   // when the values are going down, the beat is over
   digitalWrite(blinkPin,LOW);            // turn off pin 13 LED
    Pulse = false;                         // reset the Pulse flag so we can do it again
    amp = P - T;                           // get amplitude of the pulse wave
    thresh = amp/2 + T;                    // set thresh at 50% of the amplitude
    P = thresh;                            // reset these for next time
    T = thresh;
  }

  if (N > 2500){                           // if 2.5 seconds go by without a beat
    thresh = 512;                          // set thresh default
    P = 512;                               // set P default
    T = 512;                               // set T default
    lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date        
    firstBeat = true;                      // set these to avoid noise
    secondBeat = false;                    // when we get the heartbeat back
  }

  sei();                                   // enable interrupts when youre done!
}// end isr





void ledFadeToBeat(){
    fadeRate -= 15;                         //  set LED fade value
    fadeRate = constrain(fadeRate,0,255);   //  keep LED fade value from going into negative numbers!
    analogWrite(fadePin,fadeRate);          //  fade LED
  }
